
ADC_DrawNow.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bf8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000c6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c6f  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6e  00000000  00000000  00002b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f37  00000000  00000000  000037b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  000046ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000935  00000000  00000000  00004bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000172b  00000000  00000000  000054f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00006c24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 af 03 	jmp	0x75e	; 0x75e <__vector_13>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	5e 00       	.word	0x005e	; ????
  56:	62 00       	.word	0x0062	; ????
  58:	66 00       	.word	0x0066	; ????
  5a:	6a 00       	.word	0x006a	; ????
  5c:	6e 00       	.word	0x006e	; ????
  5e:	72 00       	.word	0x0072	; ????
  60:	76 00       	.word	0x0076	; ????

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_clear_bss>:
  6e:	20 e0       	ldi	r18, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	01 c0       	rjmp	.+2      	; 0x78 <.do_clear_bss_start>

00000076 <.do_clear_bss_loop>:
  76:	1d 92       	st	X+, r1

00000078 <.do_clear_bss_start>:
  78:	a4 36       	cpi	r26, 0x64	; 100
  7a:	b2 07       	cpc	r27, r18
  7c:	e1 f7       	brne	.-8      	; 0x76 <.do_clear_bss_loop>
  7e:	0e 94 6f 03 	call	0x6de	; 0x6de <main>
  82:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <ADC_Init>:
#define ADC_Busy           (((ADC_ADCSRA) & (1<<ADSC) ))


void ADC_Init(Vref_type vref,Clk_SelectType clk)
{
	switch(vref)
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	39 f0       	breq	.+14     	; 0x9c <ADC_Init+0x12>
  8e:	18 f0       	brcs	.+6      	; 0x96 <ADC_Init+0xc>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	39 f0       	breq	.+14     	; 0xa2 <ADC_Init+0x18>
  94:	08 c0       	rjmp	.+16     	; 0xa6 <ADC_Init+0x1c>
	{
			case (Vref_Turn_Off):
			
			CLEAR_BIT(ADC_ADUMX,REFS0);
  96:	3e 98       	cbi	0x07, 6	; 7
			CLEAR_BIT(ADC_ADUMX,REFS0);
  98:	3e 98       	cbi	0x07, 6	; 7
			break;
  9a:	05 c0       	rjmp	.+10     	; 0xa6 <ADC_Init+0x1c>
			
			case (AVCC):
			
			Set_BIT(ADC_ADUMX,REFS0);
  9c:	3e 9a       	sbi	0x07, 6	; 7
			CLEAR_BIT(ADC_ADUMX,REFS1);
  9e:	3f 98       	cbi	0x07, 7	; 7
			break;
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <ADC_Init+0x1c>
			
			case(Internal_Vref):
		    
			Set_BIT(ADC_ADUMX,REFS1);
  a2:	3f 9a       	sbi	0x07, 7	; 7
			Set_BIT(ADC_ADUMX,REFS1);
  a4:	3f 9a       	sbi	0x07, 7	; 7
			break;
		
			
	}
	
	switch(clk)
  a6:	86 2f       	mov	r24, r22
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	fc 01       	movw	r30, r24
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	e7 30       	cpi	r30, 0x07	; 7
  b0:	f1 05       	cpc	r31, r1
  b2:	f8 f4       	brcc	.+62     	; 0xf2 <ADC_Init+0x68>
  b4:	e6 5d       	subi	r30, 0xD6	; 214
  b6:	ff 4f       	sbci	r31, 0xFF	; 255
  b8:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__tablejump2__>
	{
			case(CLK_ADC_DIV_2):
			
			Set_BIT(ADC_ADCSRA,ADPS0);
  bc:	30 9a       	sbi	0x06, 0	; 6
			CLEAR_BIT(ADC_ADCSRA,ADPS1);
  be:	31 98       	cbi	0x06, 1	; 6
			CLEAR_BIT(ADC_ADCSRA,ADPS2);
  c0:	32 98       	cbi	0x06, 2	; 6
			
			break;
  c2:	17 c0       	rjmp	.+46     	; 0xf2 <ADC_Init+0x68>
			
			case(CLK_ADC_DIV_4):
			
			CLEAR_BIT(ADC_ADCSRA,ADPS0);
  c4:	30 98       	cbi	0x06, 0	; 6
			Set_BIT(ADC_ADCSRA,ADPS1);
  c6:	31 9a       	sbi	0x06, 1	; 6
			CLEAR_BIT(ADC_ADCSRA,ADPS2);
  c8:	32 98       	cbi	0x06, 2	; 6
			
			break;
  ca:	13 c0       	rjmp	.+38     	; 0xf2 <ADC_Init+0x68>
			
			case(CLK_ADC_DIV_8):
			
			Set_BIT(ADC_ADCSRA,ADPS0);
  cc:	30 9a       	sbi	0x06, 0	; 6
			Set_BIT(ADC_ADCSRA,ADPS1);
  ce:	31 9a       	sbi	0x06, 1	; 6
			CLEAR_BIT(ADC_ADCSRA,ADPS2);
  d0:	32 98       	cbi	0x06, 2	; 6
			
			break;
  d2:	0f c0       	rjmp	.+30     	; 0xf2 <ADC_Init+0x68>
			
			case(CLK_ADC_DIV_16):
			
			CLEAR_BIT(ADC_ADCSRA,ADPS0);
  d4:	30 98       	cbi	0x06, 0	; 6
			CLEAR_BIT(ADC_ADCSRA,ADPS1);
  d6:	31 98       	cbi	0x06, 1	; 6
			Set_BIT(ADC_ADCSRA,ADPS2);
  d8:	32 9a       	sbi	0x06, 2	; 6
			
			break;
  da:	0b c0       	rjmp	.+22     	; 0xf2 <ADC_Init+0x68>
			
			case(CLK_ADC_DIV_32):
			
		    Set_BIT(ADC_ADCSRA,ADPS0);
  dc:	30 9a       	sbi	0x06, 0	; 6
		    CLEAR_BIT(ADC_ADCSRA,ADPS1);
  de:	31 98       	cbi	0x06, 1	; 6
		    Set_BIT(ADC_ADCSRA,ADPS2);
  e0:	32 9a       	sbi	0x06, 2	; 6
			
			
			break;
  e2:	07 c0       	rjmp	.+14     	; 0xf2 <ADC_Init+0x68>
			
			case(CLK_ADC_DIV_64):
			
			CLEAR_BIT(ADC_ADCSRA,ADPS0);
  e4:	30 98       	cbi	0x06, 0	; 6
			Set_BIT(ADC_ADCSRA,ADPS1);
  e6:	31 9a       	sbi	0x06, 1	; 6
			Set_BIT(ADC_ADCSRA,ADPS2);
  e8:	32 9a       	sbi	0x06, 2	; 6
			
			break;
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <ADC_Init+0x68>
			
		    case(CLK_ADC_DIV_128):
			
			Set_BIT(ADC_ADCSRA,ADPS0);
  ec:	30 9a       	sbi	0x06, 0	; 6
			Set_BIT(ADC_ADCSRA,ADPS1);
  ee:	31 9a       	sbi	0x06, 1	; 6
			Set_BIT(ADC_ADCSRA,ADPS2);		    
  f0:	32 9a       	sbi	0x06, 2	; 6
                     // Wrong Enter
			break;
		
	}
	
	CLEAR_BIT(ADC_ADUMX,ADLAR);
  f2:	3d 98       	cbi	0x07, 5	; 7
	
	
	 //ADC   ADCSRA Enable bit
	
	Set_BIT(ADC_ADCSRA,ADEN);
  f4:	37 9a       	sbi	0x06, 7	; 6
  f6:	08 95       	ret

000000f8 <ADC_Converstion>:
}


void ADC_Converstion(Conversion__Status state)
{
	SET_REGISTER_PIN(ADC_ADCSRA,ADSC,state);
  f8:	26 b1       	in	r18, 0x06	; 6
  fa:	2f 7b       	andi	r18, 0xBF	; 191
  fc:	30 e4       	ldi	r19, 0x40	; 64
  fe:	83 9f       	mul	r24, r19
 100:	c0 01       	movw	r24, r0
 102:	11 24       	eor	r1, r1
 104:	82 2b       	or	r24, r18
 106:	86 b9       	out	0x06, r24	; 6
 108:	08 95       	ret

0000010a <ADC_Read>:
  
  
  
  }	*/
	
		ADC_ADUMX &=~(0x1f);              // Clear all channels
 10a:	97 b1       	in	r25, 0x07	; 7
 10c:	90 7e       	andi	r25, 0xE0	; 224
 10e:	97 b9       	out	0x07, r25	; 7
		
		ADC_ADUMX|=(channel<<MUX0);
 110:	97 b1       	in	r25, 0x07	; 7
 112:	89 2b       	or	r24, r25
 114:	87 b9       	out	0x07, r24	; 7
		
        ADC_Converstion(Conversion_on);
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 7c 00 	call	0xf8	; 0xf8 <ADC_Converstion>

        while(ADC_Busy);
 11c:	36 99       	sbic	0x06, 6	; 6
 11e:	fe cf       	rjmp	.-4      	; 0x11c <ADC_Read+0x12>
		
		ret=ADC;
 120:	84 b1       	in	r24, 0x04	; 4
 122:	95 b1       	in	r25, 0x05	; 5
		
		return ret;

}
 124:	08 95       	ret

00000126 <Pin_Init>:
			break;
			case (PD):
			Toggl_BIT(PORTD,pin_num);
			break;
			case (PC):
			Toggl_BIT(PORTC,pin_num);
 126:	98 2f       	mov	r25, r24
 128:	96 95       	lsr	r25
 12a:	96 95       	lsr	r25
 12c:	96 95       	lsr	r25
 12e:	87 70       	andi	r24, 0x07	; 7
 130:	61 30       	cpi	r22, 0x01	; 1
 132:	09 f4       	brne	.+2      	; 0x136 <Pin_Init+0x10>
 134:	90 c0       	rjmp	.+288    	; 0x256 <Pin_Init+0x130>
 136:	18 f0       	brcs	.+6      	; 0x13e <Pin_Init+0x18>
 138:	62 30       	cpi	r22, 0x02	; 2
 13a:	e9 f1       	breq	.+122    	; 0x1b6 <Pin_Init+0x90>
 13c:	08 95       	ret
 13e:	91 30       	cpi	r25, 0x01	; 1
 140:	99 f0       	breq	.+38     	; 0x168 <Pin_Init+0x42>
 142:	28 f0       	brcs	.+10     	; 0x14e <Pin_Init+0x28>
 144:	92 30       	cpi	r25, 0x02	; 2
 146:	51 f1       	breq	.+84     	; 0x19c <Pin_Init+0x76>
 148:	93 30       	cpi	r25, 0x03	; 3
 14a:	d9 f0       	breq	.+54     	; 0x182 <Pin_Init+0x5c>
 14c:	08 95       	ret
 14e:	4a b3       	in	r20, 0x1a	; 26
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	b9 01       	movw	r22, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <Pin_Init+0x36>
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	8a 95       	dec	r24
 15e:	e2 f7       	brpl	.-8      	; 0x158 <Pin_Init+0x32>
 160:	cb 01       	movw	r24, r22
 162:	84 2b       	or	r24, r20
 164:	8a bb       	out	0x1a, r24	; 26
 166:	08 95       	ret
 168:	47 b3       	in	r20, 0x17	; 23
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	b9 01       	movw	r22, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <Pin_Init+0x50>
 172:	66 0f       	add	r22, r22
 174:	77 1f       	adc	r23, r23
 176:	8a 95       	dec	r24
 178:	e2 f7       	brpl	.-8      	; 0x172 <Pin_Init+0x4c>
 17a:	cb 01       	movw	r24, r22
 17c:	84 2b       	or	r24, r20
 17e:	87 bb       	out	0x17, r24	; 23
 180:	08 95       	ret
 182:	41 b3       	in	r20, 0x11	; 17
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	b9 01       	movw	r22, r18
 18a:	02 c0       	rjmp	.+4      	; 0x190 <Pin_Init+0x6a>
 18c:	66 0f       	add	r22, r22
 18e:	77 1f       	adc	r23, r23
 190:	8a 95       	dec	r24
 192:	e2 f7       	brpl	.-8      	; 0x18c <Pin_Init+0x66>
 194:	cb 01       	movw	r24, r22
 196:	84 2b       	or	r24, r20
 198:	81 bb       	out	0x11, r24	; 17
 19a:	08 95       	ret
 19c:	44 b3       	in	r20, 0x14	; 20
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	b9 01       	movw	r22, r18
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <Pin_Init+0x84>
 1a6:	66 0f       	add	r22, r22
 1a8:	77 1f       	adc	r23, r23
 1aa:	8a 95       	dec	r24
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <Pin_Init+0x80>
 1ae:	cb 01       	movw	r24, r22
 1b0:	84 2b       	or	r24, r20
 1b2:	84 bb       	out	0x14, r24	; 20
 1b4:	08 95       	ret
 1b6:	91 30       	cpi	r25, 0x01	; 1
 1b8:	c1 f0       	breq	.+48     	; 0x1ea <Pin_Init+0xc4>
 1ba:	28 f0       	brcs	.+10     	; 0x1c6 <Pin_Init+0xa0>
 1bc:	92 30       	cpi	r25, 0x02	; 2
 1be:	c9 f1       	breq	.+114    	; 0x232 <Pin_Init+0x10c>
 1c0:	93 30       	cpi	r25, 0x03	; 3
 1c2:	29 f1       	breq	.+74     	; 0x20e <Pin_Init+0xe8>
 1c4:	08 95       	ret
 1c6:	4a b3       	in	r20, 0x1a	; 26
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	b9 01       	movw	r22, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <Pin_Init+0xae>
 1d0:	66 0f       	add	r22, r22
 1d2:	77 1f       	adc	r23, r23
 1d4:	8a 95       	dec	r24
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <Pin_Init+0xaa>
 1d8:	cb 01       	movw	r24, r22
 1da:	96 2f       	mov	r25, r22
 1dc:	90 95       	com	r25
 1de:	94 23       	and	r25, r20
 1e0:	9a bb       	out	0x1a, r25	; 26
 1e2:	9b b3       	in	r25, 0x1b	; 27
 1e4:	89 2b       	or	r24, r25
 1e6:	8b bb       	out	0x1b, r24	; 27
 1e8:	08 95       	ret
 1ea:	47 b3       	in	r20, 0x17	; 23
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	b9 01       	movw	r22, r18
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <Pin_Init+0xd2>
 1f4:	66 0f       	add	r22, r22
 1f6:	77 1f       	adc	r23, r23
 1f8:	8a 95       	dec	r24
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <Pin_Init+0xce>
 1fc:	cb 01       	movw	r24, r22
 1fe:	96 2f       	mov	r25, r22
 200:	90 95       	com	r25
 202:	94 23       	and	r25, r20
 204:	97 bb       	out	0x17, r25	; 23
 206:	98 b3       	in	r25, 0x18	; 24
 208:	89 2b       	or	r24, r25
 20a:	88 bb       	out	0x18, r24	; 24
 20c:	08 95       	ret
 20e:	41 b3       	in	r20, 0x11	; 17
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	b9 01       	movw	r22, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <Pin_Init+0xf6>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	8a 95       	dec	r24
 21e:	e2 f7       	brpl	.-8      	; 0x218 <Pin_Init+0xf2>
 220:	cb 01       	movw	r24, r22
 222:	96 2f       	mov	r25, r22
 224:	90 95       	com	r25
 226:	94 23       	and	r25, r20
 228:	91 bb       	out	0x11, r25	; 17
 22a:	92 b3       	in	r25, 0x12	; 18
 22c:	89 2b       	or	r24, r25
 22e:	82 bb       	out	0x12, r24	; 18
 230:	08 95       	ret
 232:	44 b3       	in	r20, 0x14	; 20
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	b9 01       	movw	r22, r18
 23a:	02 c0       	rjmp	.+4      	; 0x240 <Pin_Init+0x11a>
 23c:	66 0f       	add	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	8a 95       	dec	r24
 242:	e2 f7       	brpl	.-8      	; 0x23c <Pin_Init+0x116>
 244:	cb 01       	movw	r24, r22
 246:	96 2f       	mov	r25, r22
 248:	90 95       	com	r25
 24a:	94 23       	and	r25, r20
 24c:	94 bb       	out	0x14, r25	; 20
 24e:	95 b3       	in	r25, 0x15	; 21
 250:	89 2b       	or	r24, r25
 252:	85 bb       	out	0x15, r24	; 21
 254:	08 95       	ret
 256:	91 30       	cpi	r25, 0x01	; 1
 258:	c1 f0       	breq	.+48     	; 0x28a <Pin_Init+0x164>
 25a:	28 f0       	brcs	.+10     	; 0x266 <Pin_Init+0x140>
 25c:	92 30       	cpi	r25, 0x02	; 2
 25e:	c9 f1       	breq	.+114    	; 0x2d2 <Pin_Init+0x1ac>
 260:	93 30       	cpi	r25, 0x03	; 3
 262:	29 f1       	breq	.+74     	; 0x2ae <Pin_Init+0x188>
 264:	08 95       	ret
 266:	4a b3       	in	r20, 0x1a	; 26
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	b9 01       	movw	r22, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <Pin_Init+0x14e>
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	8a 95       	dec	r24
 276:	e2 f7       	brpl	.-8      	; 0x270 <Pin_Init+0x14a>
 278:	cb 01       	movw	r24, r22
 27a:	80 95       	com	r24
 27c:	94 2f       	mov	r25, r20
 27e:	98 23       	and	r25, r24
 280:	9a bb       	out	0x1a, r25	; 26
 282:	9b b3       	in	r25, 0x1b	; 27
 284:	89 23       	and	r24, r25
 286:	8b bb       	out	0x1b, r24	; 27
 288:	08 95       	ret
 28a:	47 b3       	in	r20, 0x17	; 23
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	b9 01       	movw	r22, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <Pin_Init+0x172>
 294:	66 0f       	add	r22, r22
 296:	77 1f       	adc	r23, r23
 298:	8a 95       	dec	r24
 29a:	e2 f7       	brpl	.-8      	; 0x294 <Pin_Init+0x16e>
 29c:	cb 01       	movw	r24, r22
 29e:	80 95       	com	r24
 2a0:	94 2f       	mov	r25, r20
 2a2:	98 23       	and	r25, r24
 2a4:	97 bb       	out	0x17, r25	; 23
 2a6:	98 b3       	in	r25, 0x18	; 24
 2a8:	89 23       	and	r24, r25
 2aa:	88 bb       	out	0x18, r24	; 24
 2ac:	08 95       	ret
 2ae:	41 b3       	in	r20, 0x11	; 17
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	b9 01       	movw	r22, r18
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <Pin_Init+0x196>
 2b8:	66 0f       	add	r22, r22
 2ba:	77 1f       	adc	r23, r23
 2bc:	8a 95       	dec	r24
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <Pin_Init+0x192>
 2c0:	cb 01       	movw	r24, r22
 2c2:	80 95       	com	r24
 2c4:	94 2f       	mov	r25, r20
 2c6:	98 23       	and	r25, r24
 2c8:	91 bb       	out	0x11, r25	; 17
 2ca:	92 b3       	in	r25, 0x12	; 18
 2cc:	89 23       	and	r24, r25
 2ce:	82 bb       	out	0x12, r24	; 18
 2d0:	08 95       	ret
 2d2:	44 b3       	in	r20, 0x14	; 20
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	b9 01       	movw	r22, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <Pin_Init+0x1ba>
 2dc:	66 0f       	add	r22, r22
 2de:	77 1f       	adc	r23, r23
 2e0:	8a 95       	dec	r24
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <Pin_Init+0x1b6>
 2e4:	cb 01       	movw	r24, r22
 2e6:	80 95       	com	r24
 2e8:	94 2f       	mov	r25, r20
 2ea:	98 23       	and	r25, r24
 2ec:	94 bb       	out	0x14, r25	; 20
 2ee:	95 b3       	in	r25, 0x15	; 21
 2f0:	89 23       	and	r24, r25
 2f2:	85 bb       	out	0x15, r24	; 21
 2f4:	08 95       	ret

000002f6 <Set_Pin>:
 2f6:	98 2f       	mov	r25, r24
 2f8:	97 70       	andi	r25, 0x07	; 7
 2fa:	86 95       	lsr	r24
 2fc:	86 95       	lsr	r24
 2fe:	86 95       	lsr	r24
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	c9 f0       	breq	.+50     	; 0x336 <Set_Pin+0x40>
 304:	28 f0       	brcs	.+10     	; 0x310 <Set_Pin+0x1a>
 306:	82 30       	cpi	r24, 0x02	; 2
 308:	e1 f1       	breq	.+120    	; 0x382 <Set_Pin+0x8c>
 30a:	83 30       	cpi	r24, 0x03	; 3
 30c:	39 f1       	breq	.+78     	; 0x35c <Set_Pin+0x66>
 30e:	08 95       	ret
 310:	2b b3       	in	r18, 0x1b	; 27
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	09 2e       	mov	r0, r25
 318:	02 c0       	rjmp	.+4      	; 0x31e <Set_Pin+0x28>
 31a:	44 0f       	add	r20, r20
 31c:	55 1f       	adc	r21, r21
 31e:	0a 94       	dec	r0
 320:	e2 f7       	brpl	.-8      	; 0x31a <Set_Pin+0x24>
 322:	84 2f       	mov	r24, r20
 324:	80 95       	com	r24
 326:	82 23       	and	r24, r18
 328:	01 c0       	rjmp	.+2      	; 0x32c <Set_Pin+0x36>
 32a:	66 0f       	add	r22, r22
 32c:	9a 95       	dec	r25
 32e:	ea f7       	brpl	.-6      	; 0x32a <Set_Pin+0x34>
 330:	68 2b       	or	r22, r24
 332:	6b bb       	out	0x1b, r22	; 27
 334:	08 95       	ret
 336:	28 b3       	in	r18, 0x18	; 24
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	09 2e       	mov	r0, r25
 33e:	02 c0       	rjmp	.+4      	; 0x344 <Set_Pin+0x4e>
 340:	44 0f       	add	r20, r20
 342:	55 1f       	adc	r21, r21
 344:	0a 94       	dec	r0
 346:	e2 f7       	brpl	.-8      	; 0x340 <Set_Pin+0x4a>
 348:	84 2f       	mov	r24, r20
 34a:	80 95       	com	r24
 34c:	82 23       	and	r24, r18
 34e:	01 c0       	rjmp	.+2      	; 0x352 <Set_Pin+0x5c>
 350:	66 0f       	add	r22, r22
 352:	9a 95       	dec	r25
 354:	ea f7       	brpl	.-6      	; 0x350 <Set_Pin+0x5a>
 356:	68 2b       	or	r22, r24
 358:	68 bb       	out	0x18, r22	; 24
 35a:	08 95       	ret
 35c:	22 b3       	in	r18, 0x12	; 18
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	09 2e       	mov	r0, r25
 364:	02 c0       	rjmp	.+4      	; 0x36a <Set_Pin+0x74>
 366:	44 0f       	add	r20, r20
 368:	55 1f       	adc	r21, r21
 36a:	0a 94       	dec	r0
 36c:	e2 f7       	brpl	.-8      	; 0x366 <Set_Pin+0x70>
 36e:	84 2f       	mov	r24, r20
 370:	80 95       	com	r24
 372:	82 23       	and	r24, r18
 374:	01 c0       	rjmp	.+2      	; 0x378 <Set_Pin+0x82>
 376:	66 0f       	add	r22, r22
 378:	9a 95       	dec	r25
 37a:	ea f7       	brpl	.-6      	; 0x376 <Set_Pin+0x80>
 37c:	68 2b       	or	r22, r24
 37e:	62 bb       	out	0x12, r22	; 18
 380:	08 95       	ret
 382:	25 b3       	in	r18, 0x15	; 21
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	09 2e       	mov	r0, r25
 38a:	02 c0       	rjmp	.+4      	; 0x390 <Set_Pin+0x9a>
 38c:	44 0f       	add	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <Set_Pin+0x96>
 394:	84 2f       	mov	r24, r20
 396:	80 95       	com	r24
 398:	82 23       	and	r24, r18
 39a:	01 c0       	rjmp	.+2      	; 0x39e <Set_Pin+0xa8>
 39c:	66 0f       	add	r22, r22
 39e:	9a 95       	dec	r25
 3a0:	ea f7       	brpl	.-6      	; 0x39c <Set_Pin+0xa6>
 3a2:	68 2b       	or	r22, r24
 3a4:	65 bb       	out	0x15, r22	; 21
 3a6:	08 95       	ret

000003a8 <Port_Init>:
	
}
// PORT FUNC
extern void Port_Init(DIO_Port_type port,uint8 value)
{
	switch(port)
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	41 f0       	breq	.+16     	; 0x3bc <Port_Init+0x14>
 3ac:	28 f0       	brcs	.+10     	; 0x3b8 <Port_Init+0x10>
 3ae:	82 30       	cpi	r24, 0x02	; 2
 3b0:	39 f0       	breq	.+14     	; 0x3c0 <Port_Init+0x18>
 3b2:	83 30       	cpi	r24, 0x03	; 3
 3b4:	39 f0       	breq	.+14     	; 0x3c4 <Port_Init+0x1c>
 3b6:	08 95       	ret
	{
		case (PA):
		PUT_VALUE_8bit(DDRA,value);
 3b8:	6a bb       	out	0x1a, r22	; 26
		break;
 3ba:	08 95       	ret
		case (PB):
		PUT_VALUE_8bit(DDRB,value);
 3bc:	67 bb       	out	0x17, r22	; 23
		break;
 3be:	08 95       	ret
		case (PC):
		PUT_VALUE_8bit(DDRC,value);
 3c0:	64 bb       	out	0x14, r22	; 20
		break;		
 3c2:	08 95       	ret
		case (PD):
		PUT_VALUE_8bit(DDRD,value);
 3c4:	61 bb       	out	0x11, r22	; 17
 3c6:	08 95       	ret

000003c8 <Set_Port>:
	}
	
}
extern void Set_Port(DIO_Port_type port ,uint8 value)
{
		switch(port)
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	41 f0       	breq	.+16     	; 0x3dc <Set_Port+0x14>
 3cc:	28 f0       	brcs	.+10     	; 0x3d8 <Set_Port+0x10>
 3ce:	82 30       	cpi	r24, 0x02	; 2
 3d0:	39 f0       	breq	.+14     	; 0x3e0 <Set_Port+0x18>
 3d2:	83 30       	cpi	r24, 0x03	; 3
 3d4:	39 f0       	breq	.+14     	; 0x3e4 <Set_Port+0x1c>
 3d6:	08 95       	ret
		{
			case (PA):
			PUT_VALUE_8bit(PORTA,value);
 3d8:	6b bb       	out	0x1b, r22	; 27
			break;
 3da:	08 95       	ret
			case (PB):
			PUT_VALUE_8bit(PORTB,value);
 3dc:	68 bb       	out	0x18, r22	; 24
			break;
 3de:	08 95       	ret
			case (PC):
			PUT_VALUE_8bit(PORTC,value);
 3e0:	65 bb       	out	0x15, r22	; 21
			break;
 3e2:	08 95       	ret
			case (PD):
			PUT_VALUE_8bit(PORTD,value);
 3e4:	62 bb       	out	0x12, r22	; 18
 3e6:	08 95       	ret

000003e8 <Display_Init>:
#include "ADC.h"
#include "Sensors.h"
#include <util/delay.h>
void Display_Init()
{
	LCD_Init();
 3e8:	0e 94 90 02 	call	0x520	; 0x520 <LCD_Init>
    
	UART_Init();
 3ec:	0e 94 8c 03 	call	0x718	; 0x718 <UART_Init>
	
	UART_State(Both);
 3f0:	82 e0       	ldi	r24, 0x02	; 2
 3f2:	0e 94 9c 03 	call	0x738	; 0x738 <UART_State>

	ADC_Init(AVCC,CLK_ADC_DIV_64);
 3f6:	66 e0       	ldi	r22, 0x06	; 6
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 45 00 	call	0x8a	; 0x8a <ADC_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fe:	2f e9       	ldi	r18, 0x9F	; 159
 400:	86 e8       	ldi	r24, 0x86	; 134
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	21 50       	subi	r18, 0x01	; 1
 406:	80 40       	sbci	r24, 0x00	; 0
 408:	90 40       	sbci	r25, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
	_delay_ms(500);
	ADC_Converstion(Conversion_on);
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 7c 00 	call	0xf8	; 0xf8 <ADC_Converstion>
 416:	08 95       	ret

00000418 <Display_Update>:
}



void Display_Update()
{
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
	static uint16 temp=0;
	uint8 x=0;
	temp=Volt_read();
 41c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <Volt_read>
	x=((uint16)temp/1000);
 420:	9c 01       	movw	r18, r24
 422:	36 95       	lsr	r19
 424:	27 95       	ror	r18
 426:	36 95       	lsr	r19
 428:	27 95       	ror	r18
 42a:	36 95       	lsr	r19
 42c:	27 95       	ror	r18
 42e:	a5 ec       	ldi	r26, 0xC5	; 197
 430:	b0 e2       	ldi	r27, 0x20	; 32
 432:	0e 94 08 05 	call	0xa10	; 0xa10 <__umulhisi3>
 436:	ec 01       	movw	r28, r24
 438:	d2 95       	swap	r29
 43a:	c2 95       	swap	r28
 43c:	cf 70       	andi	r28, 0x0F	; 15
 43e:	cd 27       	eor	r28, r29
 440:	df 70       	andi	r29, 0x0F	; 15
 442:	cd 27       	eor	r28, r29
	
	Set_UART_data(x);
 444:	8c 2f       	mov	r24, r28
 446:	0e 94 ab 03 	call	0x756	; 0x756 <Set_UART_data>
	
	LCD_goto(0,0);
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_goto>
	
	LCD_Number(x);
 452:	2c 2f       	mov	r18, r28
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	50 e0       	ldi	r21, 0x00	; 0
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 b8 02 	call	0x570	; 0x570 <LCD_Number>
 466:	2f e3       	ldi	r18, 0x3F	; 63
 468:	82 e4       	ldi	r24, 0x42	; 66
 46a:	9f e0       	ldi	r25, 0x0F	; 15
 46c:	21 50       	subi	r18, 0x01	; 1
 46e:	80 40       	sbci	r24, 0x00	; 0
 470:	90 40       	sbci	r25, 0x00	; 0
 472:	e1 f7       	brne	.-8      	; 0x46c <Display_Update+0x54>
 474:	00 c0       	rjmp	.+0      	; 0x476 <Display_Update+0x5e>
 476:	00 00       	nop
	
	_delay_ms(5000);
	
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <Kick>:
		LCD_data(*str);
	    str++;
	}
	
	
}
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	8a e1       	ldi	r24, 0x1A	; 26
 482:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Set_Pin>
 486:	8f ec       	ldi	r24, 0xCF	; 207
 488:	97 e0       	ldi	r25, 0x07	; 7
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <Kick+0xc>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <Kick+0x12>
 490:	00 00       	nop
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	8a e1       	ldi	r24, 0x1A	; 26
 496:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Set_Pin>
 49a:	8f e9       	ldi	r24, 0x9F	; 159
 49c:	9f e0       	ldi	r25, 0x0F	; 15
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <Kick+0x20>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <Kick+0x26>
 4a4:	00 00       	nop
 4a6:	08 95       	ret

000004a8 <LCD_Cmd>:
 4a8:	cf 93       	push	r28
 4aa:	c8 2f       	mov	r28, r24
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	8b e1       	ldi	r24, 0x1B	; 27
 4b0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Set_Pin>
 4b4:	6c 2f       	mov	r22, r28
 4b6:	60 7f       	andi	r22, 0xF0	; 240
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <Set_Port>
 4be:	0e 94 3f 02 	call	0x47e	; 0x47e <Kick>
 4c2:	80 e1       	ldi	r24, 0x10	; 16
 4c4:	c8 9f       	mul	r28, r24
 4c6:	b0 01       	movw	r22, r0
 4c8:	11 24       	eor	r1, r1
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <Set_Port>
 4d0:	0e 94 3f 02 	call	0x47e	; 0x47e <Kick>
 4d4:	8f e9       	ldi	r24, 0x9F	; 159
 4d6:	9f e0       	ldi	r25, 0x0F	; 15
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <LCD_Cmd+0x30>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <LCD_Cmd+0x36>
 4de:	00 00       	nop
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <LCD_data>:
 4e4:	cf 93       	push	r28
 4e6:	c8 2f       	mov	r28, r24
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	8b e1       	ldi	r24, 0x1B	; 27
 4ec:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Set_Pin>
 4f0:	6c 2f       	mov	r22, r28
 4f2:	60 7f       	andi	r22, 0xF0	; 240
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <Set_Port>
 4fa:	0e 94 3f 02 	call	0x47e	; 0x47e <Kick>
 4fe:	80 e1       	ldi	r24, 0x10	; 16
 500:	c8 9f       	mul	r28, r24
 502:	b0 01       	movw	r22, r0
 504:	11 24       	eor	r1, r1
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <Set_Port>
 50c:	0e 94 3f 02 	call	0x47e	; 0x47e <Kick>
 510:	8f e9       	ldi	r24, 0x9F	; 159
 512:	9f e0       	ldi	r25, 0x0F	; 15
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <LCD_data+0x30>
 518:	00 c0       	rjmp	.+0      	; 0x51a <LCD_data+0x36>
 51a:	00 00       	nop
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <LCD_Init>:
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	8a e1       	ldi	r24, 0x1A	; 26
 524:	0e 94 93 00 	call	0x126	; 0x126 <Pin_Init>
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	8b e1       	ldi	r24, 0x1B	; 27
 52c:	0e 94 93 00 	call	0x126	; 0x126 <Pin_Init>
 530:	2f e7       	ldi	r18, 0x7F	; 127
 532:	88 e3       	ldi	r24, 0x38	; 56
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	21 50       	subi	r18, 0x01	; 1
 538:	80 40       	sbci	r24, 0x00	; 0
 53a:	90 40       	sbci	r25, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <LCD_Init+0x16>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <LCD_Init+0x20>
 540:	00 00       	nop
 542:	60 ef       	ldi	r22, 0xF0	; 240
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <Port_Init>
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Cmd>
 550:	82 e0       	ldi	r24, 0x02	; 2
 552:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Cmd>
 556:	88 e2       	ldi	r24, 0x28	; 40
 558:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Cmd>
 55c:	86 e0       	ldi	r24, 0x06	; 6
 55e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Cmd>
 562:	8c e0       	ldi	r24, 0x0C	; 12
 564:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Cmd>
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Cmd>
 56e:	08 95       	ret

00000570 <LCD_Number>:

void LCD_Number(uint64 num)
{
 570:	2f 92       	push	r2
 572:	3f 92       	push	r3
 574:	4f 92       	push	r4
 576:	5f 92       	push	r5
 578:	6f 92       	push	r6
 57a:	7f 92       	push	r7
 57c:	8f 92       	push	r8
 57e:	9f 92       	push	r9
 580:	af 92       	push	r10
 582:	bf 92       	push	r11
 584:	cf 92       	push	r12
 586:	df 92       	push	r13
 588:	ef 92       	push	r14
 58a:	ff 92       	push	r15
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	63 97       	sbiw	r28, 0x13	; 19
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	de bf       	out	0x3e, r29	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	cd bf       	out	0x3d, r28	; 61
 5a4:	29 8b       	std	Y+17, r18	; 0x11
 5a6:	3a 8b       	std	Y+18, r19	; 0x12
 5a8:	4b 8b       	std	Y+19, r20	; 0x13
 5aa:	85 2e       	mov	r8, r21
 5ac:	76 2e       	mov	r7, r22
 5ae:	67 2e       	mov	r6, r23
 5b0:	38 2e       	mov	r3, r24
 5b2:	29 2e       	mov	r2, r25
	uint8 temp[16],i=0;
	uint8 mod;
	
	if (num==0)
 5b4:	a0 e0       	ldi	r26, 0x00	; 0
 5b6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__cmpdi2_s8>
 5ba:	21 f4       	brne	.+8      	; 0x5c4 <LCD_Number+0x54>
	{
		LCD_data('0');
 5bc:	80 e3       	ldi	r24, 0x30	; 48
 5be:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_data>
 5c2:	63 c0       	rjmp	.+198    	; 0x68a <LCD_Number+0x11a>
	}
	else if(num<0)
 5c4:	29 89       	ldd	r18, Y+17	; 0x11
 5c6:	3a 89       	ldd	r19, Y+18	; 0x12
 5c8:	4b 89       	ldd	r20, Y+19	; 0x13
 5ca:	a0 e0       	ldi	r26, 0x00	; 0
 5cc:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__cmpdi2_s8>
 5d0:	d4 f4       	brge	.+52     	; 0x606 <LCD_Number+0x96>
{
  	LCD_Cmd(CLEAR_SCREEN);
}
void LCD_Chr(uint8 data)
{
	LCD_data(data);
 5d2:	8d e2       	ldi	r24, 0x2D	; 45
 5d4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_data>
		LCD_data('0');
	}
	else if(num<0)
	{
		LCD_Chr(0x2d);
		num=num*-1;
 5d8:	29 89       	ldd	r18, Y+17	; 0x11
 5da:	3a 89       	ldd	r19, Y+18	; 0x12
 5dc:	4b 89       	ldd	r20, Y+19	; 0x13
 5de:	58 2d       	mov	r21, r8
 5e0:	67 2d       	mov	r22, r7
 5e2:	76 2d       	mov	r23, r6
 5e4:	83 2d       	mov	r24, r3
 5e6:	92 2d       	mov	r25, r2
 5e8:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__negdi2>
 5ec:	29 8b       	std	Y+17, r18	; 0x11
 5ee:	3a 8b       	std	Y+18, r19	; 0x12
 5f0:	4b 8b       	std	Y+19, r20	; 0x13
 5f2:	85 2e       	mov	r8, r21
 5f4:	76 2e       	mov	r7, r22
 5f6:	67 2e       	mov	r6, r23
 5f8:	38 2e       	mov	r3, r24
 5fa:	29 2e       	mov	r2, r25
	}
	
		while(num)
 5fc:	a0 e0       	ldi	r26, 0x00	; 0
 5fe:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__cmpdi2_s8>
 602:	09 f4       	brne	.+2      	; 0x606 <LCD_Number+0x96>
 604:	42 c0       	rjmp	.+132    	; 0x68a <LCD_Number+0x11a>
	
	
}

void LCD_Number(uint64 num)
{
 606:	91 2c       	mov	r9, r1
	}
	
		while(num)
		{
			mod=num%10;
			temp[i]=mod;
 608:	44 24       	eor	r4, r4
 60a:	43 94       	inc	r4
 60c:	51 2c       	mov	r5, r1
 60e:	4c 0e       	add	r4, r28
 610:	5d 1e       	adc	r5, r29
 612:	49 0c       	add	r4, r9
 614:	51 1c       	adc	r5, r1
 616:	0f 2e       	mov	r0, r31
 618:	fa e0       	ldi	r31, 0x0A	; 10
 61a:	af 2e       	mov	r10, r31
 61c:	f0 2d       	mov	r31, r0
 61e:	b1 2c       	mov	r11, r1
 620:	c1 2c       	mov	r12, r1
 622:	d1 2c       	mov	r13, r1
 624:	e1 2c       	mov	r14, r1
 626:	f1 2c       	mov	r15, r1
 628:	00 e0       	ldi	r16, 0x00	; 0
 62a:	10 e0       	ldi	r17, 0x00	; 0
 62c:	29 89       	ldd	r18, Y+17	; 0x11
 62e:	3a 89       	ldd	r19, Y+18	; 0x12
 630:	4b 89       	ldd	r20, Y+19	; 0x13
 632:	58 2d       	mov	r21, r8
 634:	67 2d       	mov	r22, r7
 636:	76 2d       	mov	r23, r6
 638:	83 2d       	mov	r24, r3
 63a:	92 2d       	mov	r25, r2
 63c:	0e 94 17 05 	call	0xa2e	; 0xa2e <__moddi3>
 640:	f2 01       	movw	r30, r4
 642:	20 83       	st	Z, r18
			num/=10;
 644:	29 89       	ldd	r18, Y+17	; 0x11
 646:	3a 89       	ldd	r19, Y+18	; 0x12
 648:	4b 89       	ldd	r20, Y+19	; 0x13
 64a:	58 2d       	mov	r21, r8
 64c:	67 2d       	mov	r22, r7
 64e:	76 2d       	mov	r23, r6
 650:	83 2d       	mov	r24, r3
 652:	92 2d       	mov	r25, r2
 654:	0e 94 19 05 	call	0xa32	; 0xa32 <__divdi3>
 658:	29 8b       	std	Y+17, r18	; 0x11
 65a:	3a 8b       	std	Y+18, r19	; 0x12
 65c:	4b 8b       	std	Y+19, r20	; 0x13
 65e:	85 2e       	mov	r8, r21
 660:	76 2e       	mov	r7, r22
 662:	67 2e       	mov	r6, r23
 664:	38 2e       	mov	r3, r24
 666:	29 2e       	mov	r2, r25
			i++;
 668:	93 94       	inc	r9
	{
		LCD_Chr(0x2d);
		num=num*-1;
	}
	
		while(num)
 66a:	a0 e0       	ldi	r26, 0x00	; 0
 66c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__cmpdi2_s8>
 670:	59 f6       	brne	.-106    	; 0x608 <LCD_Number+0x98>
			temp[i]=mod;
			num/=10;
			i++;
		}
		
		for (;i>=1;i--)
 672:	99 20       	and	r9, r9
 674:	51 f0       	breq	.+20     	; 0x68a <LCD_Number+0x11a>
		{
			LCD_data(temp[i-1]+'0');
 676:	fe 01       	movw	r30, r28
 678:	e9 0d       	add	r30, r9
 67a:	f1 1d       	adc	r31, r1
 67c:	80 81       	ld	r24, Z
 67e:	80 5d       	subi	r24, 0xD0	; 208
 680:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_data>
			temp[i]=mod;
			num/=10;
			i++;
		}
		
		for (;i>=1;i--)
 684:	9a 94       	dec	r9
 686:	91 10       	cpse	r9, r1
 688:	f6 cf       	rjmp	.-20     	; 0x676 <LCD_Number+0x106>
		{
			LCD_data(temp[i-1]+'0');
		}
		LCD_data(temp[i]);
 68a:	89 81       	ldd	r24, Y+1	; 0x01
 68c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_data>
	
}
 690:	63 96       	adiw	r28, 0x13	; 19
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	f8 94       	cli
 696:	de bf       	out	0x3e, r29	; 62
 698:	0f be       	out	0x3f, r0	; 63
 69a:	cd bf       	out	0x3d, r28	; 61
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	1f 91       	pop	r17
 6a2:	0f 91       	pop	r16
 6a4:	ff 90       	pop	r15
 6a6:	ef 90       	pop	r14
 6a8:	df 90       	pop	r13
 6aa:	cf 90       	pop	r12
 6ac:	bf 90       	pop	r11
 6ae:	af 90       	pop	r10
 6b0:	9f 90       	pop	r9
 6b2:	8f 90       	pop	r8
 6b4:	7f 90       	pop	r7
 6b6:	6f 90       	pop	r6
 6b8:	5f 90       	pop	r5
 6ba:	4f 90       	pop	r4
 6bc:	3f 90       	pop	r3
 6be:	2f 90       	pop	r2
 6c0:	08 95       	ret

000006c2 <LCD_goto>:



void LCD_goto(uint8 row,uint8 col)
{
	if (row==0)
 6c2:	81 11       	cpse	r24, r1
 6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <LCD_goto+0xe>
	{
		LCD_Cmd(0x80|col);
 6c6:	86 2f       	mov	r24, r22
 6c8:	80 68       	ori	r24, 0x80	; 128
 6ca:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Cmd>
 6ce:	08 95       	ret
	}
	else if (row==1)
 6d0:	81 30       	cpi	r24, 0x01	; 1
 6d2:	21 f4       	brne	.+8      	; 0x6dc <LCD_goto+0x1a>
	{
		LCD_Cmd(0xc0|col);
 6d4:	86 2f       	mov	r24, r22
 6d6:	80 6c       	ori	r24, 0xC0	; 192
 6d8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_Cmd>
 6dc:	08 95       	ret

000006de <main>:


int main(void)
{
    /* Replace with your application code */
	Display_Init();
 6de:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Display_Init>
    while (1) 
    {
		Display_Update();
 6e2:	0e 94 0c 02 	call	0x418	; 0x418 <Display_Update>
 6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <main+0x4>

000006e8 <Volt_read>:
#include "Sensors.h"
#include "Port_h.h"
uint16 Volt_read()
{
	uint16 adc;
   adc=ADC_Read(POT_CHANNEL);
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	0e 94 85 00 	call	0x10a	; 0x10a <ADC_Read>
   adc=((uint32)adc*5000)/1024;
 6ee:	bc 01       	movw	r22, r24
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 07 04 	call	0x80e	; 0x80e <__floatunsisf>
 6f8:	20 e0       	ldi	r18, 0x00	; 0
 6fa:	30 e4       	ldi	r19, 0x40	; 64
 6fc:	4c e9       	ldi	r20, 0x9C	; 156
 6fe:	55 e4       	ldi	r21, 0x45	; 69
 700:	0e 94 95 04 	call	0x92a	; 0x92a <__mulsf3>
 704:	20 e0       	ldi	r18, 0x00	; 0
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	40 e8       	ldi	r20, 0x80	; 128
 70a:	5a e3       	ldi	r21, 0x3A	; 58
 70c:	0e 94 95 04 	call	0x92a	; 0x92a <__mulsf3>
   return adc;
 710:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fixunssfsi>
}
 714:	cb 01       	movw	r24, r22
 716:	08 95       	ret

00000718 <UART_Init>:
}

void UART_TX_Set_Call_Back(ptr_call_back Func_ptr)
{
	
	Static_FUNC_Call_Back[1]=Func_ptr;
 718:	83 e3       	ldi	r24, 0x33	; 51
 71a:	89 b9       	out	0x09, r24	; 9
 71c:	80 b5       	in	r24, 0x20	; 32
 71e:	82 60       	ori	r24, 0x02	; 2
 720:	80 bd       	out	0x20, r24	; 32
 722:	80 b5       	in	r24, 0x20	; 32
 724:	84 60       	ori	r24, 0x04	; 4
 726:	80 bd       	out	0x20, r24	; 32
 728:	52 98       	cbi	0x0a, 2	; 10
 72a:	e0 e6       	ldi	r30, 0x60	; 96
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	11 82       	std	Z+1, r1	; 0x01
 730:	10 82       	st	Z, r1
 732:	13 82       	std	Z+3, r1	; 0x03
 734:	12 82       	std	Z+2, r1	; 0x02
 736:	08 95       	ret

00000738 <UART_State>:
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	39 f0       	breq	.+14     	; 0x74a <UART_State+0x12>
 73c:	18 f0       	brcs	.+6      	; 0x744 <UART_State+0xc>
 73e:	82 30       	cpi	r24, 0x02	; 2
 740:	39 f0       	breq	.+14     	; 0x750 <UART_State+0x18>
 742:	08 95       	ret
 744:	54 9a       	sbi	0x0a, 4	; 10
 746:	53 98       	cbi	0x0a, 3	; 10
 748:	08 95       	ret
 74a:	54 98       	cbi	0x0a, 4	; 10
 74c:	53 9a       	sbi	0x0a, 3	; 10
 74e:	08 95       	ret
 750:	53 9a       	sbi	0x0a, 3	; 10
 752:	54 9a       	sbi	0x0a, 4	; 10
 754:	08 95       	ret

00000756 <Set_UART_data>:
 756:	5d 9b       	sbis	0x0b, 5	; 11
 758:	fe cf       	rjmp	.-4      	; 0x756 <Set_UART_data>
 75a:	8c b9       	out	0x0c, r24	; 12
 75c:	08 95       	ret

0000075e <__vector_13>:
	
}
ISR(UART_RX_vect)
{
 75e:	1f 92       	push	r1
 760:	0f 92       	push	r0
 762:	0f b6       	in	r0, 0x3f	; 63
 764:	0f 92       	push	r0
 766:	11 24       	eor	r1, r1
 768:	2f 93       	push	r18
 76a:	3f 93       	push	r19
 76c:	4f 93       	push	r20
 76e:	5f 93       	push	r21
 770:	6f 93       	push	r22
 772:	7f 93       	push	r23
 774:	8f 93       	push	r24
 776:	9f 93       	push	r25
 778:	af 93       	push	r26
 77a:	bf 93       	push	r27
 77c:	ef 93       	push	r30
 77e:	ff 93       	push	r31
	if (Static_FUNC_Call_Back[0]!=NULL_PTR)
 780:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
 784:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <_edata+0x1>
 788:	30 97       	sbiw	r30, 0x00	; 0
 78a:	09 f0       	breq	.+2      	; 0x78e <__vector_13+0x30>
	{
		Static_FUNC_Call_Back[0]();
 78c:	09 95       	icall
	}
	
	
}
 78e:	ff 91       	pop	r31
 790:	ef 91       	pop	r30
 792:	bf 91       	pop	r27
 794:	af 91       	pop	r26
 796:	9f 91       	pop	r25
 798:	8f 91       	pop	r24
 79a:	7f 91       	pop	r23
 79c:	6f 91       	pop	r22
 79e:	5f 91       	pop	r21
 7a0:	4f 91       	pop	r20
 7a2:	3f 91       	pop	r19
 7a4:	2f 91       	pop	r18
 7a6:	0f 90       	pop	r0
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	0f 90       	pop	r0
 7ac:	1f 90       	pop	r1
 7ae:	18 95       	reti

000007b0 <__fixunssfsi>:
 7b0:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__fp_splitA>
 7b4:	88 f0       	brcs	.+34     	; 0x7d8 <__fixunssfsi+0x28>
 7b6:	9f 57       	subi	r25, 0x7F	; 127
 7b8:	98 f0       	brcs	.+38     	; 0x7e0 <__fixunssfsi+0x30>
 7ba:	b9 2f       	mov	r27, r25
 7bc:	99 27       	eor	r25, r25
 7be:	b7 51       	subi	r27, 0x17	; 23
 7c0:	b0 f0       	brcs	.+44     	; 0x7ee <__fixunssfsi+0x3e>
 7c2:	e1 f0       	breq	.+56     	; 0x7fc <__fixunssfsi+0x4c>
 7c4:	66 0f       	add	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	88 1f       	adc	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	1a f0       	brmi	.+6      	; 0x7d4 <__fixunssfsi+0x24>
 7ce:	ba 95       	dec	r27
 7d0:	c9 f7       	brne	.-14     	; 0x7c4 <__fixunssfsi+0x14>
 7d2:	14 c0       	rjmp	.+40     	; 0x7fc <__fixunssfsi+0x4c>
 7d4:	b1 30       	cpi	r27, 0x01	; 1
 7d6:	91 f0       	breq	.+36     	; 0x7fc <__fixunssfsi+0x4c>
 7d8:	0e 94 8e 04 	call	0x91c	; 0x91c <__fp_zero>
 7dc:	b1 e0       	ldi	r27, 0x01	; 1
 7de:	08 95       	ret
 7e0:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_zero>
 7e4:	67 2f       	mov	r22, r23
 7e6:	78 2f       	mov	r23, r24
 7e8:	88 27       	eor	r24, r24
 7ea:	b8 5f       	subi	r27, 0xF8	; 248
 7ec:	39 f0       	breq	.+14     	; 0x7fc <__fixunssfsi+0x4c>
 7ee:	b9 3f       	cpi	r27, 0xF9	; 249
 7f0:	cc f3       	brlt	.-14     	; 0x7e4 <__fixunssfsi+0x34>
 7f2:	86 95       	lsr	r24
 7f4:	77 95       	ror	r23
 7f6:	67 95       	ror	r22
 7f8:	b3 95       	inc	r27
 7fa:	d9 f7       	brne	.-10     	; 0x7f2 <__fixunssfsi+0x42>
 7fc:	3e f4       	brtc	.+14     	; 0x80c <__fixunssfsi+0x5c>
 7fe:	90 95       	com	r25
 800:	80 95       	com	r24
 802:	70 95       	com	r23
 804:	61 95       	neg	r22
 806:	7f 4f       	sbci	r23, 0xFF	; 255
 808:	8f 4f       	sbci	r24, 0xFF	; 255
 80a:	9f 4f       	sbci	r25, 0xFF	; 255
 80c:	08 95       	ret

0000080e <__floatunsisf>:
 80e:	e8 94       	clt
 810:	09 c0       	rjmp	.+18     	; 0x824 <__floatsisf+0x12>

00000812 <__floatsisf>:
 812:	97 fb       	bst	r25, 7
 814:	3e f4       	brtc	.+14     	; 0x824 <__floatsisf+0x12>
 816:	90 95       	com	r25
 818:	80 95       	com	r24
 81a:	70 95       	com	r23
 81c:	61 95       	neg	r22
 81e:	7f 4f       	sbci	r23, 0xFF	; 255
 820:	8f 4f       	sbci	r24, 0xFF	; 255
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	99 23       	and	r25, r25
 826:	a9 f0       	breq	.+42     	; 0x852 <__floatsisf+0x40>
 828:	f9 2f       	mov	r31, r25
 82a:	96 e9       	ldi	r25, 0x96	; 150
 82c:	bb 27       	eor	r27, r27
 82e:	93 95       	inc	r25
 830:	f6 95       	lsr	r31
 832:	87 95       	ror	r24
 834:	77 95       	ror	r23
 836:	67 95       	ror	r22
 838:	b7 95       	ror	r27
 83a:	f1 11       	cpse	r31, r1
 83c:	f8 cf       	rjmp	.-16     	; 0x82e <__floatsisf+0x1c>
 83e:	fa f4       	brpl	.+62     	; 0x87e <__stack+0x1f>
 840:	bb 0f       	add	r27, r27
 842:	11 f4       	brne	.+4      	; 0x848 <__floatsisf+0x36>
 844:	60 ff       	sbrs	r22, 0
 846:	1b c0       	rjmp	.+54     	; 0x87e <__stack+0x1f>
 848:	6f 5f       	subi	r22, 0xFF	; 255
 84a:	7f 4f       	sbci	r23, 0xFF	; 255
 84c:	8f 4f       	sbci	r24, 0xFF	; 255
 84e:	9f 4f       	sbci	r25, 0xFF	; 255
 850:	16 c0       	rjmp	.+44     	; 0x87e <__stack+0x1f>
 852:	88 23       	and	r24, r24
 854:	11 f0       	breq	.+4      	; 0x85a <__floatsisf+0x48>
 856:	96 e9       	ldi	r25, 0x96	; 150
 858:	11 c0       	rjmp	.+34     	; 0x87c <__stack+0x1d>
 85a:	77 23       	and	r23, r23
 85c:	21 f0       	breq	.+8      	; 0x866 <__stack+0x7>
 85e:	9e e8       	ldi	r25, 0x8E	; 142
 860:	87 2f       	mov	r24, r23
 862:	76 2f       	mov	r23, r22
 864:	05 c0       	rjmp	.+10     	; 0x870 <__stack+0x11>
 866:	66 23       	and	r22, r22
 868:	71 f0       	breq	.+28     	; 0x886 <__stack+0x27>
 86a:	96 e8       	ldi	r25, 0x86	; 134
 86c:	86 2f       	mov	r24, r22
 86e:	70 e0       	ldi	r23, 0x00	; 0
 870:	60 e0       	ldi	r22, 0x00	; 0
 872:	2a f0       	brmi	.+10     	; 0x87e <__stack+0x1f>
 874:	9a 95       	dec	r25
 876:	66 0f       	add	r22, r22
 878:	77 1f       	adc	r23, r23
 87a:	88 1f       	adc	r24, r24
 87c:	da f7       	brpl	.-10     	; 0x874 <__stack+0x15>
 87e:	88 0f       	add	r24, r24
 880:	96 95       	lsr	r25
 882:	87 95       	ror	r24
 884:	97 f9       	bld	r25, 7
 886:	08 95       	ret

00000888 <__fp_inf>:
 888:	97 f9       	bld	r25, 7
 88a:	9f 67       	ori	r25, 0x7F	; 127
 88c:	80 e8       	ldi	r24, 0x80	; 128
 88e:	70 e0       	ldi	r23, 0x00	; 0
 890:	60 e0       	ldi	r22, 0x00	; 0
 892:	08 95       	ret

00000894 <__fp_nan>:
 894:	9f ef       	ldi	r25, 0xFF	; 255
 896:	80 ec       	ldi	r24, 0xC0	; 192
 898:	08 95       	ret

0000089a <__fp_pscA>:
 89a:	00 24       	eor	r0, r0
 89c:	0a 94       	dec	r0
 89e:	16 16       	cp	r1, r22
 8a0:	17 06       	cpc	r1, r23
 8a2:	18 06       	cpc	r1, r24
 8a4:	09 06       	cpc	r0, r25
 8a6:	08 95       	ret

000008a8 <__fp_pscB>:
 8a8:	00 24       	eor	r0, r0
 8aa:	0a 94       	dec	r0
 8ac:	12 16       	cp	r1, r18
 8ae:	13 06       	cpc	r1, r19
 8b0:	14 06       	cpc	r1, r20
 8b2:	05 06       	cpc	r0, r21
 8b4:	08 95       	ret

000008b6 <__fp_round>:
 8b6:	09 2e       	mov	r0, r25
 8b8:	03 94       	inc	r0
 8ba:	00 0c       	add	r0, r0
 8bc:	11 f4       	brne	.+4      	; 0x8c2 <__fp_round+0xc>
 8be:	88 23       	and	r24, r24
 8c0:	52 f0       	brmi	.+20     	; 0x8d6 <__fp_round+0x20>
 8c2:	bb 0f       	add	r27, r27
 8c4:	40 f4       	brcc	.+16     	; 0x8d6 <__fp_round+0x20>
 8c6:	bf 2b       	or	r27, r31
 8c8:	11 f4       	brne	.+4      	; 0x8ce <__fp_round+0x18>
 8ca:	60 ff       	sbrs	r22, 0
 8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__fp_round+0x20>
 8ce:	6f 5f       	subi	r22, 0xFF	; 255
 8d0:	7f 4f       	sbci	r23, 0xFF	; 255
 8d2:	8f 4f       	sbci	r24, 0xFF	; 255
 8d4:	9f 4f       	sbci	r25, 0xFF	; 255
 8d6:	08 95       	ret

000008d8 <__fp_split3>:
 8d8:	57 fd       	sbrc	r21, 7
 8da:	90 58       	subi	r25, 0x80	; 128
 8dc:	44 0f       	add	r20, r20
 8de:	55 1f       	adc	r21, r21
 8e0:	59 f0       	breq	.+22     	; 0x8f8 <__fp_splitA+0x10>
 8e2:	5f 3f       	cpi	r21, 0xFF	; 255
 8e4:	71 f0       	breq	.+28     	; 0x902 <__fp_splitA+0x1a>
 8e6:	47 95       	ror	r20

000008e8 <__fp_splitA>:
 8e8:	88 0f       	add	r24, r24
 8ea:	97 fb       	bst	r25, 7
 8ec:	99 1f       	adc	r25, r25
 8ee:	61 f0       	breq	.+24     	; 0x908 <__fp_splitA+0x20>
 8f0:	9f 3f       	cpi	r25, 0xFF	; 255
 8f2:	79 f0       	breq	.+30     	; 0x912 <__fp_splitA+0x2a>
 8f4:	87 95       	ror	r24
 8f6:	08 95       	ret
 8f8:	12 16       	cp	r1, r18
 8fa:	13 06       	cpc	r1, r19
 8fc:	14 06       	cpc	r1, r20
 8fe:	55 1f       	adc	r21, r21
 900:	f2 cf       	rjmp	.-28     	; 0x8e6 <__fp_split3+0xe>
 902:	46 95       	lsr	r20
 904:	f1 df       	rcall	.-30     	; 0x8e8 <__fp_splitA>
 906:	08 c0       	rjmp	.+16     	; 0x918 <__fp_splitA+0x30>
 908:	16 16       	cp	r1, r22
 90a:	17 06       	cpc	r1, r23
 90c:	18 06       	cpc	r1, r24
 90e:	99 1f       	adc	r25, r25
 910:	f1 cf       	rjmp	.-30     	; 0x8f4 <__fp_splitA+0xc>
 912:	86 95       	lsr	r24
 914:	71 05       	cpc	r23, r1
 916:	61 05       	cpc	r22, r1
 918:	08 94       	sec
 91a:	08 95       	ret

0000091c <__fp_zero>:
 91c:	e8 94       	clt

0000091e <__fp_szero>:
 91e:	bb 27       	eor	r27, r27
 920:	66 27       	eor	r22, r22
 922:	77 27       	eor	r23, r23
 924:	cb 01       	movw	r24, r22
 926:	97 f9       	bld	r25, 7
 928:	08 95       	ret

0000092a <__mulsf3>:
 92a:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsf3x>
 92e:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_round>
 932:	0e 94 4d 04 	call	0x89a	; 0x89a <__fp_pscA>
 936:	38 f0       	brcs	.+14     	; 0x946 <__mulsf3+0x1c>
 938:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__fp_pscB>
 93c:	20 f0       	brcs	.+8      	; 0x946 <__mulsf3+0x1c>
 93e:	95 23       	and	r25, r21
 940:	11 f0       	breq	.+4      	; 0x946 <__mulsf3+0x1c>
 942:	0c 94 44 04 	jmp	0x888	; 0x888 <__fp_inf>
 946:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_nan>
 94a:	11 24       	eor	r1, r1
 94c:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__fp_szero>

00000950 <__mulsf3x>:
 950:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_split3>
 954:	70 f3       	brcs	.-36     	; 0x932 <__mulsf3+0x8>

00000956 <__mulsf3_pse>:
 956:	95 9f       	mul	r25, r21
 958:	c1 f3       	breq	.-16     	; 0x94a <__mulsf3+0x20>
 95a:	95 0f       	add	r25, r21
 95c:	50 e0       	ldi	r21, 0x00	; 0
 95e:	55 1f       	adc	r21, r21
 960:	62 9f       	mul	r22, r18
 962:	f0 01       	movw	r30, r0
 964:	72 9f       	mul	r23, r18
 966:	bb 27       	eor	r27, r27
 968:	f0 0d       	add	r31, r0
 96a:	b1 1d       	adc	r27, r1
 96c:	63 9f       	mul	r22, r19
 96e:	aa 27       	eor	r26, r26
 970:	f0 0d       	add	r31, r0
 972:	b1 1d       	adc	r27, r1
 974:	aa 1f       	adc	r26, r26
 976:	64 9f       	mul	r22, r20
 978:	66 27       	eor	r22, r22
 97a:	b0 0d       	add	r27, r0
 97c:	a1 1d       	adc	r26, r1
 97e:	66 1f       	adc	r22, r22
 980:	82 9f       	mul	r24, r18
 982:	22 27       	eor	r18, r18
 984:	b0 0d       	add	r27, r0
 986:	a1 1d       	adc	r26, r1
 988:	62 1f       	adc	r22, r18
 98a:	73 9f       	mul	r23, r19
 98c:	b0 0d       	add	r27, r0
 98e:	a1 1d       	adc	r26, r1
 990:	62 1f       	adc	r22, r18
 992:	83 9f       	mul	r24, r19
 994:	a0 0d       	add	r26, r0
 996:	61 1d       	adc	r22, r1
 998:	22 1f       	adc	r18, r18
 99a:	74 9f       	mul	r23, r20
 99c:	33 27       	eor	r19, r19
 99e:	a0 0d       	add	r26, r0
 9a0:	61 1d       	adc	r22, r1
 9a2:	23 1f       	adc	r18, r19
 9a4:	84 9f       	mul	r24, r20
 9a6:	60 0d       	add	r22, r0
 9a8:	21 1d       	adc	r18, r1
 9aa:	82 2f       	mov	r24, r18
 9ac:	76 2f       	mov	r23, r22
 9ae:	6a 2f       	mov	r22, r26
 9b0:	11 24       	eor	r1, r1
 9b2:	9f 57       	subi	r25, 0x7F	; 127
 9b4:	50 40       	sbci	r21, 0x00	; 0
 9b6:	9a f0       	brmi	.+38     	; 0x9de <__mulsf3_pse+0x88>
 9b8:	f1 f0       	breq	.+60     	; 0x9f6 <__mulsf3_pse+0xa0>
 9ba:	88 23       	and	r24, r24
 9bc:	4a f0       	brmi	.+18     	; 0x9d0 <__mulsf3_pse+0x7a>
 9be:	ee 0f       	add	r30, r30
 9c0:	ff 1f       	adc	r31, r31
 9c2:	bb 1f       	adc	r27, r27
 9c4:	66 1f       	adc	r22, r22
 9c6:	77 1f       	adc	r23, r23
 9c8:	88 1f       	adc	r24, r24
 9ca:	91 50       	subi	r25, 0x01	; 1
 9cc:	50 40       	sbci	r21, 0x00	; 0
 9ce:	a9 f7       	brne	.-22     	; 0x9ba <__mulsf3_pse+0x64>
 9d0:	9e 3f       	cpi	r25, 0xFE	; 254
 9d2:	51 05       	cpc	r21, r1
 9d4:	80 f0       	brcs	.+32     	; 0x9f6 <__mulsf3_pse+0xa0>
 9d6:	0c 94 44 04 	jmp	0x888	; 0x888 <__fp_inf>
 9da:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__fp_szero>
 9de:	5f 3f       	cpi	r21, 0xFF	; 255
 9e0:	e4 f3       	brlt	.-8      	; 0x9da <__mulsf3_pse+0x84>
 9e2:	98 3e       	cpi	r25, 0xE8	; 232
 9e4:	d4 f3       	brlt	.-12     	; 0x9da <__mulsf3_pse+0x84>
 9e6:	86 95       	lsr	r24
 9e8:	77 95       	ror	r23
 9ea:	67 95       	ror	r22
 9ec:	b7 95       	ror	r27
 9ee:	f7 95       	ror	r31
 9f0:	e7 95       	ror	r30
 9f2:	9f 5f       	subi	r25, 0xFF	; 255
 9f4:	c1 f7       	brne	.-16     	; 0x9e6 <__mulsf3_pse+0x90>
 9f6:	fe 2b       	or	r31, r30
 9f8:	88 0f       	add	r24, r24
 9fa:	91 1d       	adc	r25, r1
 9fc:	96 95       	lsr	r25
 9fe:	87 95       	ror	r24
 a00:	97 f9       	bld	r25, 7
 a02:	08 95       	ret

00000a04 <__tablejump2__>:
 a04:	ee 0f       	add	r30, r30
 a06:	ff 1f       	adc	r31, r31
 a08:	05 90       	lpm	r0, Z+
 a0a:	f4 91       	lpm	r31, Z
 a0c:	e0 2d       	mov	r30, r0
 a0e:	09 94       	ijmp

00000a10 <__umulhisi3>:
 a10:	a2 9f       	mul	r26, r18
 a12:	b0 01       	movw	r22, r0
 a14:	b3 9f       	mul	r27, r19
 a16:	c0 01       	movw	r24, r0
 a18:	a3 9f       	mul	r26, r19
 a1a:	70 0d       	add	r23, r0
 a1c:	81 1d       	adc	r24, r1
 a1e:	11 24       	eor	r1, r1
 a20:	91 1d       	adc	r25, r1
 a22:	b2 9f       	mul	r27, r18
 a24:	70 0d       	add	r23, r0
 a26:	81 1d       	adc	r24, r1
 a28:	11 24       	eor	r1, r1
 a2a:	91 1d       	adc	r25, r1
 a2c:	08 95       	ret

00000a2e <__moddi3>:
 a2e:	68 94       	set
 a30:	01 c0       	rjmp	.+2      	; 0xa34 <__divdi3_moddi3>

00000a32 <__divdi3>:
 a32:	e8 94       	clt

00000a34 <__divdi3_moddi3>:
 a34:	f9 2f       	mov	r31, r25
 a36:	f1 2b       	or	r31, r17
 a38:	12 f0       	brmi	.+4      	; 0xa3e <__divdi3_moddi3+0xa>
 a3a:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__udivdi3_umoddi3>
 a3e:	a0 e0       	ldi	r26, 0x00	; 0
 a40:	b0 e0       	ldi	r27, 0x00	; 0
 a42:	e5 e2       	ldi	r30, 0x25	; 37
 a44:	f5 e0       	ldi	r31, 0x05	; 5
 a46:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__prologue_saves__+0xc>
 a4a:	09 2e       	mov	r0, r25
 a4c:	05 94       	asr	r0
 a4e:	22 f4       	brpl	.+8      	; 0xa58 <__divdi3_moddi3+0x24>
 a50:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__negdi2>
 a54:	11 23       	and	r17, r17
 a56:	92 f4       	brpl	.+36     	; 0xa7c <__divdi3_moddi3+0x48>
 a58:	f0 e8       	ldi	r31, 0x80	; 128
 a5a:	0f 26       	eor	r0, r31
 a5c:	ff ef       	ldi	r31, 0xFF	; 255
 a5e:	e0 94       	com	r14
 a60:	f0 94       	com	r15
 a62:	00 95       	com	r16
 a64:	10 95       	com	r17
 a66:	b0 94       	com	r11
 a68:	c0 94       	com	r12
 a6a:	d0 94       	com	r13
 a6c:	a1 94       	neg	r10
 a6e:	bf 0a       	sbc	r11, r31
 a70:	cf 0a       	sbc	r12, r31
 a72:	df 0a       	sbc	r13, r31
 a74:	ef 0a       	sbc	r14, r31
 a76:	ff 0a       	sbc	r15, r31
 a78:	0f 0b       	sbc	r16, r31
 a7a:	1f 0b       	sbc	r17, r31
 a7c:	0e 94 56 05 	call	0xaac	; 0xaac <__udivmod64>
 a80:	07 fc       	sbrc	r0, 7
 a82:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__negdi2>
 a86:	cd b7       	in	r28, 0x3d	; 61
 a88:	de b7       	in	r29, 0x3e	; 62
 a8a:	ec e0       	ldi	r30, 0x0C	; 12
 a8c:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__epilogue_restores__+0xc>

00000a90 <__umoddi3>:
 a90:	68 94       	set
 a92:	01 c0       	rjmp	.+2      	; 0xa96 <__udivdi3_umoddi3>

00000a94 <__udivdi3>:
 a94:	e8 94       	clt

00000a96 <__udivdi3_umoddi3>:
 a96:	8f 92       	push	r8
 a98:	9f 92       	push	r9
 a9a:	cf 93       	push	r28
 a9c:	df 93       	push	r29
 a9e:	0e 94 56 05 	call	0xaac	; 0xaac <__udivmod64>
 aa2:	df 91       	pop	r29
 aa4:	cf 91       	pop	r28
 aa6:	9f 90       	pop	r9
 aa8:	8f 90       	pop	r8
 aaa:	08 95       	ret

00000aac <__udivmod64>:
 aac:	88 24       	eor	r8, r8
 aae:	99 24       	eor	r9, r9
 ab0:	f4 01       	movw	r30, r8
 ab2:	e4 01       	movw	r28, r8
 ab4:	b0 e4       	ldi	r27, 0x40	; 64
 ab6:	9f 93       	push	r25
 ab8:	aa 27       	eor	r26, r26
 aba:	9a 15       	cp	r25, r10
 abc:	8b 04       	cpc	r8, r11
 abe:	9c 04       	cpc	r9, r12
 ac0:	ed 05       	cpc	r30, r13
 ac2:	fe 05       	cpc	r31, r14
 ac4:	cf 05       	cpc	r28, r15
 ac6:	d0 07       	cpc	r29, r16
 ac8:	a1 07       	cpc	r26, r17
 aca:	98 f4       	brcc	.+38     	; 0xaf2 <__udivmod64+0x46>
 acc:	ad 2f       	mov	r26, r29
 ace:	dc 2f       	mov	r29, r28
 ad0:	cf 2f       	mov	r28, r31
 ad2:	fe 2f       	mov	r31, r30
 ad4:	e9 2d       	mov	r30, r9
 ad6:	98 2c       	mov	r9, r8
 ad8:	89 2e       	mov	r8, r25
 ada:	98 2f       	mov	r25, r24
 adc:	87 2f       	mov	r24, r23
 ade:	76 2f       	mov	r23, r22
 ae0:	65 2f       	mov	r22, r21
 ae2:	54 2f       	mov	r21, r20
 ae4:	43 2f       	mov	r20, r19
 ae6:	32 2f       	mov	r19, r18
 ae8:	22 27       	eor	r18, r18
 aea:	b8 50       	subi	r27, 0x08	; 8
 aec:	31 f7       	brne	.-52     	; 0xaba <__udivmod64+0xe>
 aee:	bf 91       	pop	r27
 af0:	27 c0       	rjmp	.+78     	; 0xb40 <__udivmod64+0x94>
 af2:	1b 2e       	mov	r1, r27
 af4:	bf 91       	pop	r27
 af6:	bb 27       	eor	r27, r27
 af8:	22 0f       	add	r18, r18
 afa:	33 1f       	adc	r19, r19
 afc:	44 1f       	adc	r20, r20
 afe:	55 1f       	adc	r21, r21
 b00:	66 1f       	adc	r22, r22
 b02:	77 1f       	adc	r23, r23
 b04:	88 1f       	adc	r24, r24
 b06:	99 1f       	adc	r25, r25
 b08:	88 1c       	adc	r8, r8
 b0a:	99 1c       	adc	r9, r9
 b0c:	ee 1f       	adc	r30, r30
 b0e:	ff 1f       	adc	r31, r31
 b10:	cc 1f       	adc	r28, r28
 b12:	dd 1f       	adc	r29, r29
 b14:	aa 1f       	adc	r26, r26
 b16:	bb 1f       	adc	r27, r27
 b18:	8a 14       	cp	r8, r10
 b1a:	9b 04       	cpc	r9, r11
 b1c:	ec 05       	cpc	r30, r12
 b1e:	fd 05       	cpc	r31, r13
 b20:	ce 05       	cpc	r28, r14
 b22:	df 05       	cpc	r29, r15
 b24:	a0 07       	cpc	r26, r16
 b26:	b1 07       	cpc	r27, r17
 b28:	48 f0       	brcs	.+18     	; 0xb3c <__udivmod64+0x90>
 b2a:	8a 18       	sub	r8, r10
 b2c:	9b 08       	sbc	r9, r11
 b2e:	ec 09       	sbc	r30, r12
 b30:	fd 09       	sbc	r31, r13
 b32:	ce 09       	sbc	r28, r14
 b34:	df 09       	sbc	r29, r15
 b36:	a0 0b       	sbc	r26, r16
 b38:	b1 0b       	sbc	r27, r17
 b3a:	21 60       	ori	r18, 0x01	; 1
 b3c:	1a 94       	dec	r1
 b3e:	e1 f6       	brne	.-72     	; 0xaf8 <__udivmod64+0x4c>
 b40:	2e f4       	brtc	.+10     	; 0xb4c <__udivmod64+0xa0>
 b42:	94 01       	movw	r18, r8
 b44:	af 01       	movw	r20, r30
 b46:	be 01       	movw	r22, r28
 b48:	cd 01       	movw	r24, r26
 b4a:	00 0c       	add	r0, r0
 b4c:	08 95       	ret

00000b4e <__negdi2>:
 b4e:	60 95       	com	r22
 b50:	70 95       	com	r23
 b52:	80 95       	com	r24
 b54:	90 95       	com	r25
 b56:	30 95       	com	r19
 b58:	40 95       	com	r20
 b5a:	50 95       	com	r21
 b5c:	21 95       	neg	r18
 b5e:	3f 4f       	sbci	r19, 0xFF	; 255
 b60:	4f 4f       	sbci	r20, 0xFF	; 255
 b62:	5f 4f       	sbci	r21, 0xFF	; 255
 b64:	6f 4f       	sbci	r22, 0xFF	; 255
 b66:	7f 4f       	sbci	r23, 0xFF	; 255
 b68:	8f 4f       	sbci	r24, 0xFF	; 255
 b6a:	9f 4f       	sbci	r25, 0xFF	; 255
 b6c:	08 95       	ret

00000b6e <__prologue_saves__>:
 b6e:	2f 92       	push	r2
 b70:	3f 92       	push	r3
 b72:	4f 92       	push	r4
 b74:	5f 92       	push	r5
 b76:	6f 92       	push	r6
 b78:	7f 92       	push	r7
 b7a:	8f 92       	push	r8
 b7c:	9f 92       	push	r9
 b7e:	af 92       	push	r10
 b80:	bf 92       	push	r11
 b82:	cf 92       	push	r12
 b84:	df 92       	push	r13
 b86:	ef 92       	push	r14
 b88:	ff 92       	push	r15
 b8a:	0f 93       	push	r16
 b8c:	1f 93       	push	r17
 b8e:	cf 93       	push	r28
 b90:	df 93       	push	r29
 b92:	cd b7       	in	r28, 0x3d	; 61
 b94:	de b7       	in	r29, 0x3e	; 62
 b96:	ca 1b       	sub	r28, r26
 b98:	db 0b       	sbc	r29, r27
 b9a:	0f b6       	in	r0, 0x3f	; 63
 b9c:	f8 94       	cli
 b9e:	de bf       	out	0x3e, r29	; 62
 ba0:	0f be       	out	0x3f, r0	; 63
 ba2:	cd bf       	out	0x3d, r28	; 61
 ba4:	09 94       	ijmp

00000ba6 <__epilogue_restores__>:
 ba6:	2a 88       	ldd	r2, Y+18	; 0x12
 ba8:	39 88       	ldd	r3, Y+17	; 0x11
 baa:	48 88       	ldd	r4, Y+16	; 0x10
 bac:	5f 84       	ldd	r5, Y+15	; 0x0f
 bae:	6e 84       	ldd	r6, Y+14	; 0x0e
 bb0:	7d 84       	ldd	r7, Y+13	; 0x0d
 bb2:	8c 84       	ldd	r8, Y+12	; 0x0c
 bb4:	9b 84       	ldd	r9, Y+11	; 0x0b
 bb6:	aa 84       	ldd	r10, Y+10	; 0x0a
 bb8:	b9 84       	ldd	r11, Y+9	; 0x09
 bba:	c8 84       	ldd	r12, Y+8	; 0x08
 bbc:	df 80       	ldd	r13, Y+7	; 0x07
 bbe:	ee 80       	ldd	r14, Y+6	; 0x06
 bc0:	fd 80       	ldd	r15, Y+5	; 0x05
 bc2:	0c 81       	ldd	r16, Y+4	; 0x04
 bc4:	1b 81       	ldd	r17, Y+3	; 0x03
 bc6:	aa 81       	ldd	r26, Y+2	; 0x02
 bc8:	b9 81       	ldd	r27, Y+1	; 0x01
 bca:	ce 0f       	add	r28, r30
 bcc:	d1 1d       	adc	r29, r1
 bce:	0f b6       	in	r0, 0x3f	; 63
 bd0:	f8 94       	cli
 bd2:	de bf       	out	0x3e, r29	; 62
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	cd bf       	out	0x3d, r28	; 61
 bd8:	ed 01       	movw	r28, r26
 bda:	08 95       	ret

00000bdc <__cmpdi2_s8>:
 bdc:	00 24       	eor	r0, r0
 bde:	a7 fd       	sbrc	r26, 7
 be0:	00 94       	com	r0
 be2:	2a 17       	cp	r18, r26
 be4:	30 05       	cpc	r19, r0
 be6:	40 05       	cpc	r20, r0
 be8:	50 05       	cpc	r21, r0
 bea:	60 05       	cpc	r22, r0
 bec:	70 05       	cpc	r23, r0
 bee:	80 05       	cpc	r24, r0
 bf0:	90 05       	cpc	r25, r0
 bf2:	08 95       	ret

00000bf4 <_exit>:
 bf4:	f8 94       	cli

00000bf6 <__stop_program>:
 bf6:	ff cf       	rjmp	.-2      	; 0xbf6 <__stop_program>
